<<<<<<< HEAD
{"version":3,"sources":["reviewController.js"],"names":["Course","require","exports","addReview","req","res","courseId","_req$body","author","rating","reviewText","course","newReview","regeneratorRuntime","async","_context","prev","next","params","id","body","awrap","findById","exec","sent","abrupt","timestamp","Date","reviews","push","save","redirect","concat","t0","message","stop"],"mappings":"aAAA,IAAMA,OAASC,QAAQ,2BAEvBC,QAAAC,UAAA,SAAAC,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAEQX,EAAWF,EAAIc,OAAOC,GAF9BZ,EAGyCH,EAAIgB,KAAnCZ,EAHVD,EAGUC,OAAQC,EAHlBF,EAGkBE,OAAQC,EAH1BH,EAG0BG,WAH1BK,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAQ,MACoBrB,OAAAsB,SAAAhB,GAAAiB,QADpB,KAAA,EAAA,GACoBZ,EADpBI,EAAAS,KAAA,CAAAT,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAU,OAAA,SAEQnB,EAAAA,OAAc,KAACY,KADH,qBADpB,KAAA,EAAA,OACoBN,EAAA,CAAAJ,OAAAA,EAAAC,OAAAA,EAiBdC,WAAAA,EAjBcgB,UAAA,IAAAC,MAAAhB,EAAAiB,QAAAC,KAAAjB,GADpBG,EAAAE,KAAA,GAAAJ,mBAAAQ,MA0BUV,EAAOmB,QA1BjB,KAAA,GACoBzB,EAAA0B,SAAA,YAAAC,OAAA1B,IADpBS,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAkB,GAAAlB,EAAA,MAAA,GAiBMN,EAAAA,OAAAA,KAAAA,KAAAA,wBAFgBM,EAAAkB,GAAAC,SAftB,KAAA,GAAA,IAAA,MAAA,OAAAnB,EAAAoB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"reviewController.min.js","sourcesContent":["const Course = require(\"../../api/models/course\"); // Adjust the path if necessary\r\n\r\n// Function to add a review to a specific course\r\nexports.addReview = async (req, res) => {\r\n  const courseId = req.params.id; // Getting the course ID from route parameters\r\n  const { author, rating, reviewText } = req.body; // Destructuring form data from request body\r\n\r\n  try {\r\n    // Find the course by its ID\r\n    const course = await Course.findById(courseId).exec();\r\n    \r\n    // If course not found, return a 404 status\r\n    if (!course) {\r\n      return res.status(404).send(\"Course not found\");\r\n    }\r\n\r\n    // Create a new review object\r\n    const newReview = {\r\n      author,\r\n      rating,\r\n      reviewText,\r\n      timestamp: new Date(),\r\n    };\r\n\r\n    // Push the new review into the course's reviews array\r\n    course.reviews.push(newReview);\r\n\r\n    // Save the updated course document\r\n    await course.save();\r\n\r\n    // Redirect back to the course details page (or handle success response)\r\n    res.redirect(`/courses/${courseId}`);\r\n    \r\n  } catch (error) {\r\n    // Handle any errors\r\n    res.status(500).send(\"Error adding review: \" + error.message);\r\n  }\r\n};"]}
=======
{"version":3,"sources":["reviewController.js"],"names":["Course","require","addReview","req","res","courseId","_req$body","author","rating","reviewText","course","newReview","regeneratorRuntime","async","_context","prev","next","params","id","body","awrap","findById","sent","abrupt","status","send","timestamp","Date","push","t0","stop","reviewList","_context2","exec","render","module","exports"],"mappings":"aAkDA,IAAMA,OAASC,QAAQ,2BAGLC,UAAA,SAAAC,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAX,EAAAF,EAAAc,OAAAC,GAAAZ,EAAAH,EAAAgB,KACVd,EADUC,EACVD,OADUG,EAAAF,EAAAE,OACKS,EADLX,EACKW,WADLH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAQ,MAAApB,OAAAqB,SAAAhB,GAMcgB,QANd,KAAA,EAAA,GAAAX,EAAAI,EAAAQ,KAAA,CAAAR,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAS,OAAA,SAAAnB,EAAAoB,OAAA,KAAAC,KAAA,qBAAA,KAAA,EAAA,OAAAd,EAAA,CAAAJ,OAAAA,EAAAC,OAAAA,EAeZC,WAAAA,EAfYiB,UAAA,IAAAC,MAYRhB,EAAAA,QAZQiB,KAYIjB,GAZJG,EAAAE,KAAA,GAAAJ,mBAAAQ,MAaZb,EAAAA,QAbY,KAAA,GAgBZmB,EAAAA,SAAAA,YAAAA,OAAeC,IAhBHb,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAe,GAAAf,EAAA,MAAA,GAYIV,EAAAoB,OAOlB,KAAAC,KAAA,wBAAAX,EAAAe,IAnBc,KAAA,GAAA,IAAA,MAAA,OAAAf,EAAAgB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA+BZC,WAAa,SAAO5B,EAAKC,GAAZ,IAAAC,EAAAK,EAAA,OAAAE,mBAAAC,MAAA,SAAAmB,GAAA,OAAA,OAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,KAAA,EAAA,OA/BDX,EAAAF,EAAAc,OAAAC,GA+BCc,EAAAjB,KAAA,EAAAiB,EAAAhB,KAAA,EAAAJ,mBAAAQ,MA/BDpB,OAAAqB,SAAAhB,GAAA4B,QA+BC,KAAA,EAAA,GA/BDvB,EA+BCsB,EAAAV,KAAA,CAAAU,EAAAhB,KAAA,EAAA,MAAA,OAAAgB,EAAAT,OAAA,SA/BDnB,EAAAoB,OAAA,KAAAC,KAAA,qBA+BC,KAAA,EAWfrB,EAAI8B,OAAO,gBAAiB,CA1CdxB,OAAAA,IA+BCsB,EAAAhB,KAAA,GAAA,MAAA,KAAA,GAAAgB,EAAAjB,KAAA,GAAAiB,EAAAH,GAAAG,EAAA,MAAA,GA/BD5B,EAAAoB,OAAA,KAAAC,KAAA,6BAAAO,EAAAH,IA+BC,KAAA,GAAA,IAAA,MAAA,OAAAG,EAAAF,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAmBnBK,OAAOC,QAAU,CACflC,UAAAA,UApBF6B,WAAAA","file":"reviewController.min.js","sourcesContent":["// const Course = require(\"../../api/models/course\");\r\n\r\n// // Function to add a review to a specific course\r\n// const addReview = async (req, res) => {\r\n//   const courseId = req.params.id;\r\n//   const { author, rating, reviewText } = req.body;\r\n\r\n//   try {\r\n//     // Find the course by ID\r\n//     const course = await Course.findById(courseId).exec();\r\n//     if (!course) {\r\n//       return res.status(404).send(\"Course not found\");\r\n//     }\r\n\r\n//     // Create a new review object\r\n//     const newReview = {\r\n//       author,\r\n//       rating,\r\n//       reviewText,\r\n//       timestamp: new Date().toLocaleString(),\r\n//     };\r\n\r\n//     // Push the new review to the course's reviews array\r\n//     course.reviews.push(newReview);\r\n//     await course.save();\r\n\r\n//     // Redirect to the course detail page after adding the review\r\n//     res.redirect(`/courses/${courseId}`);\r\n//   } catch (error) {\r\n//     res.status(500).send(\"Error adding review: \" + error);\r\n//   }\r\n// };\r\n// // Function to list all reviews from all courses\r\n// const reviewList = async (req, res) => {\r\n//   try {\r\n//     // Fetch all courses and extract reviews\r\n//     const courses = await Course.find().exec();\r\n//     const allReviews = courses.map(course => course.reviews).flat();\r\n\r\n//     // Render the review list page with extracted reviews\r\n//     res.render(\"reviewList\", { reviews: allReviews });\r\n//   } catch (error) {\r\n//     res.status(500).send(\"Error retrieving reviews: \" + error.message);\r\n//   }\r\n// };\r\n\r\n// module.exports = {\r\n//   addReview,\r\n//   reviewList,\r\n// };\r\nconst Course = require(\"../../api/models/course\");\r\n\r\n// Function to add a review to a specific course\r\nconst addReview = async (req, res) => {\r\n  const courseId = req.params.id;\r\n  const { author, rating, reviewText } = req.body;\r\n\r\n  try {\r\n    // Find the course by ID\r\n    const course = await Course.findById(courseId).exec();\r\n    if (!course) {\r\n      return res.status(404).send(\"Course not found\");\r\n    }\r\n\r\n    // Create a new review object\r\n    const newReview = {\r\n      author,\r\n      rating,\r\n      reviewText,\r\n      timestamp: new Date(), // Include time for better detail\r\n    };\r\n\r\n    // Push the new review to the course's reviews array\r\n    course.reviews.push(newReview);\r\n    await course.save();\r\n\r\n    // Redirect to the course detail page after adding the review\r\n    res.redirect(`/courses/${courseId}`);\r\n  } catch (error) {\r\n    res.status(500).send(\"Error adding review: \" + error);\r\n  }\r\n};\r\n\r\n// Function to list all reviews for a specific course\r\nconst reviewList = async (req, res) => {\r\n  const courseId = req.params.id; // Get course ID from the request parameters\r\n\r\n  try {\r\n    // Find the course by ID and populate the reviews\r\n    const course = await Course.findById(courseId).exec();\r\n    if (!course) {\r\n      return res.status(404).send(\"Course not found\");\r\n    }\r\n\r\n    // Render the course details page with reviews\r\n    res.render(\"courseDetails\", {\r\n      course: course, // Pass the course object to the view\r\n    });\r\n  } catch (error) {\r\n    res.status(500).send(\"Error retrieving reviews: \" + error);\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  addReview,\r\n  reviewList,\r\n};\r\n"]}
>>>>>>> baea0f805be43cb9f0d18de0157714dbb01214b3
